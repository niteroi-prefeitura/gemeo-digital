"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[731],{3423:(e,o,a)=>{a.r(o),a.d(o,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"types","title":"Valida\xe7\xe3o e Tipagem","description":"Zod + TypeScript","source":"@site/docs/types.md","sourceDirName":".","slug":"/types","permalink":"/gemeo-digital/docs/types","draft":false,"unlisted":false,"editUrl":"https://github.com/niteroi-prefeitura/gemeo-digital/tree/master/apps/docs/docs/types.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Package Manager","permalink":"/gemeo-digital/docs/package-manager"},"next":{"title":"Back-end","permalink":"/gemeo-digital/docs/category/back-end"}}');var n=a(4848),i=a(8453);const r={sidebar_position:4},t="Valida\xe7\xe3o e Tipagem",d={},c=[{value:"Zod + TypeScript",id:"zod--typescript",level:2},{value:"Motiva\xe7\xf5es para a escolha do Zod",id:"motiva\xe7\xf5es-para-a-escolha-do-zod",level:2},{value:"Estrutura no Monorepo",id:"estrutura-no-monorepo",level:2},{value:"Benef\xedcios no contexto do projeto",id:"benef\xedcios-no-contexto-do-projeto",level:2}];function l(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"valida\xe7\xe3o-e-tipagem",children:"Valida\xe7\xe3o e Tipagem"})}),"\n",(0,n.jsx)(o.h2,{id:"zod--typescript",children:"Zod + TypeScript"}),"\n",(0,n.jsxs)(o.p,{children:["Neste projeto, adotamos a biblioteca ",(0,n.jsx)(o.a,{href:"https://zod.dev/",children:"Zod"})," para realizar a valida\xe7\xe3o de dados de forma segura, declarativa e totalmente integrada com o TypeScript."]}),"\n",(0,n.jsxs)(o.p,{children:["Zod est\xe1 sendo utilizado em um pacote compartilhado dentro do monorepo, permitindo que os ",(0,n.jsx)(o.strong,{children:"schemas sejam reutilizados tanto no frontend quanto no backend"}),", garantindo ",(0,n.jsx)(o.strong,{children:"consist\xeancia, seguran\xe7a e confiabilidade"})," na troca de informa\xe7\xf5es entre as aplica\xe7\xf5es."]}),"\n",(0,n.jsx)(o.hr,{}),"\n",(0,n.jsx)(o.h2,{id:"motiva\xe7\xf5es-para-a-escolha-do-zod",children:"Motiva\xe7\xf5es para a escolha do Zod"}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsxs)(o.li,{children:["\u2705 ",(0,n.jsx)(o.strong,{children:"Valida\xe7\xe3o fortemente tipada"}),": Zod gera os tipos TypeScript a partir dos pr\xf3prios schemas, evitando inconsist\xeancias entre defini\xe7\xe3o e valida\xe7\xe3o."]}),"\n",(0,n.jsxs)(o.li,{children:["\ud83d\udd01 ",(0,n.jsx)(o.strong,{children:"Reutiliza\xe7\xe3o de schemas"}),": Como os schemas est\xe3o centralizados em um pacote compartilhado, \xe9 poss\xedvel utilizar os mesmos modelos de dados nas camadas cliente e servidor."]}),"\n",(0,n.jsxs)(o.li,{children:["\ud83d\udeab ",(0,n.jsx)(o.strong,{children:"Menos redund\xe2ncia"}),": N\xe3o \xe9 necess\xe1rio duplicar regras de valida\xe7\xe3o nem definir tipos separados \u2014 o schema serve como contrato \xfanico."]}),"\n",(0,n.jsxs)(o.li,{children:["\ud83d\udce6 ",(0,n.jsx)(o.strong,{children:"Sem depend\xeancias externas pesadas"}),": Zod \xe9 leve, moderno e escrito em TypeScript puro, com \xf3tima performance."]}),"\n",(0,n.jsxs)(o.li,{children:["\ud83d\udd10 ",(0,n.jsx)(o.strong,{children:"Valida\xe7\xe3o robusta e segura"}),": Impede que dados inv\xe1lidos ou malformados sejam processados pela aplica\xe7\xe3o."]}),"\n"]}),"\n",(0,n.jsx)(o.hr,{}),"\n",(0,n.jsx)(o.h2,{id:"estrutura-no-monorepo",children:"Estrutura no Monorepo"}),"\n",(0,n.jsxs)(o.p,{children:["Os schemas Zod est\xe3o localizados em um pacote compartilhado (",(0,n.jsx)(o.code,{children:"packages/shared/src/schemas"}),") e s\xe3o utilizados pelas aplica\xe7\xf5es de frontend e backend:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-plaintext",children:"/\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 client/       # Usa os schemas do pacote compartilhado para valida\xe7\xe3o no cliente\n\u2502   \u2514\u2500\u2500 bff/        # Utiliza os mesmos schemas para valida\xe7\xe3o de requisi\xe7\xf5es, DTOs, etc.\n\u251c\u2500\u2500 packages/\n\u2502   \u2514\u2500\u2500 shared/        \n\u2502       \u2514\u2500\u2500 src/\n\u2502           \u2514\u2500\u2500 schemas/       # Define todos os schemas com Zod\n"})}),"\n",(0,n.jsx)(o.h2,{id:"benef\xedcios-no-contexto-do-projeto",children:"Benef\xedcios no contexto do projeto"}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsx)(o.li,{children:"Maior confiabilidade entre aplica\xe7\xf5es que trocam dados (ex: frontend e backend)."}),"\n",(0,n.jsx)(o.li,{children:"Redu\xe7\xe3o de bugs causados por diverg\xeancia de formatos ou valida\xe7\xf5es manuais."}),"\n",(0,n.jsx)(o.li,{children:"Facilidade na manuten\xe7\xe3o, pois mudan\xe7as nos schemas impactam todos os consumidores de forma centralizada."}),"\n",(0,n.jsx)(o.li,{children:"A escolha do Zod fortalece a base do projeto ao unir tipagem est\xe1tica, valida\xe7\xe3o de dados e reuso de contratos, ajudando a manter o monorepo mais robusto, escal\xe1vel e seguro."}),"\n"]})]})}function p(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,o,a)=>{a.d(o,{R:()=>r,x:()=>t});var s=a(6540);const n={},i=s.createContext(n);function r(e){const o=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function t(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(i.Provider,{value:o},e.children)}}}]);